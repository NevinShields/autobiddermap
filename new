<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <title>draw a line map</title>
    <style>
        /* Set the size of the div element that contains the map */
        #map {
            width: 100%;
            height: 50vh;
            position: relative;
            transform: translateZ(0px);
            border-radius: 5px;
            box-shadow:2px 3px 12px 1px #888888;
            
        }

        #color-palette {
            clear: both;
        }

        .color-button {
            width: 30px;
            height: 30px;
            font-size: 0;
            margin: 2px;
            float: right;
            cursor: pointer;
            border-radius: 16px
        }

        .button_style {
            border-radius: 20px
            
        }

        .input_radius {
            border-bottom-right-radius: 20px;
            border-top-right-radius: 20px;
            width:40%;
        }

        .input_radius_icon {
            border-bottom-left-radius: 20px;
            border-top-left-radius: 20px;
        }

        .padding_less {
            padding-left: 0px;
        }

        .margin_container {
            margin-top: 15px;
            margin-bottom: 35px;
            
        }

        .text-align_div {
            text-align: center;
        }

        #area {
            font-weight: bold;
        }

        .btn-info {
            box-shadow: 1px 4px 10px -2px #555;
            margin:7px;
            
        }
    </style>
</head>
<body>
    <div class="container margin_container">
        <div class="row">
            <div class="col-sm-6 col-md-6">
                <div class="input-group">
                    <span class="input-group-addon input_radius_icon"><i class="glyphicon glyphicon-search"></i></span>
                    <input id="address" type="text" class="form-control input_radius " placeholder="Enter your address">
                </div>
            </div>
            <div class="col-sm-1 col-md-1 padding_less">
                <button type="button" class="btn btn-info button_style" id="search_byaddress">Search</button>
            </div>
        </div>
    </div>
    </div>

    <div class="container margin_container">
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div id="map"></div>
            </div>
        </div>
    </div>

    <div class="container" style="margin-bottom: 40px;">
        <div class="row" style=" margin-bottom: 10px;">
            <div class="col-sm-4 col-md-4">
                <div id="color-palette"></div>
            </div>
            <div class="col-sm-4 col-md-4 text-align_div">
                <button type="button" class="btn btn-info button_style" id="delete-button">Delete Selected Shape</button>
                <button type="button" class="btn btn-info button_style" id="calculate" onClick="calcar();">Calculate Area</button>
            </div>
            <div class="col-sm-4 col-md-4">
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 col-md-12 text-align_div">
                <h4 id="area">Current Area = 0.00 ft²</h4>
            </div>
        </div>

    </div>

    <script>
        // Initialize and add the map
        var map;
        var drawingManager;
        var selectedShape;
        var colors = ['#1E90FF', '#FF1493', '#32CD32', '#FF8C00', '#4B0082'];
        var selectedColor;
        var colorButtons = {};

        function clearSelection() {
            if (selectedShape) {
                selectedShape.setEditable(false);
                selectedShape = null;
            }
        }

        function setSelection(shape) {
            clearSelection();
            selectedShape = shape;
            shape.setEditable(true);
            selectColor(shape.get('fillColor') || shape.get('strokeColor'));
            google.maps.event.addListener(shape.getPath(), 'set_at', calcar);
            google.maps.event.addListener(shape.getPath(), 'insert_at', calcar);
        }

        function calcar() {
            var area = google.maps.geometry.spherical.computeArea(newShape.getPath());
            var sqare_feett = area * 10.764;
            document.getElementById("area").innerHTML = "Current Area = " + sqare_feett.toFixed(2) + " ft²";
        }

        function deleteSelectedShape() {
            if (selectedShape) {
                selectedShape.setMap(null);
            }
        }

        function selectColor(color) {
            selectedColor = color;
            for (var i = 0; i < colors.length; ++i) {
                var currColor = colors[i];
                colorButtons[currColor].style.border = currColor == color ? '2px solid #789' : '2px solid #fff';
            }

            // Retrieves the current options from the drawing manager and replaces the
            // stroke or fill color as appropriate.

            var polygonOptions = drawingManager.get('polygonOptions');
            polygonOptions.fillColor = color;
            drawingManager.set('polygonOptions', polygonOptions);
        }

        function setSelectedShapeColor(color) {
            if (selectedShape) {
                if (selectedShape.type == google.maps.drawing.OverlayType.POLYLINE) {
                    selectedShape.set('strokeColor', color);
                } else {
                    selectedShape.set('fillColor', color);
                }
            }
        }

        function makeColorButton(color) {
            var button = document.createElement('span');
            button.className = 'color-button';
            button.style.backgroundColor = color;
            google.maps.event.addDomListener(button, 'click', function() {
                selectColor(color);
                setSelectedShapeColor(color);
            });

            return button;
        }

        function buildColorPalette() {
            var colorPalette = document.getElementById('color-palette');
            colorPalette.innerHTML = '';
            for (var i = 0; i < colors.length; ++i) {
                var currColor = colors[i];
                var colorButton = makeColorButton(currColor);
                colorPalette.appendChild(colorButton);
                colorButtons[currColor] = colorButton;
            }
            selectColor(colors[0]);
        }


        function initMap() {

            var options = {
                // types: ['(cities)'],
                // componentRestrictions: {country: "jp"}
            };

            var input = document.getElementById('address');
            var autocompvare = new google.maps.places.Autocomplete(input, options);
            google.maps.event.addListener(autocompvare, 'place_changed', function() {
                var place = autocompvare.getPlace();
                lat_current = place.geometry.location.lat();
                lng_current = place.geometry.location.lng();

            });

            document.getElementById("search_byaddress").addEventListener("click", search_byaddress);

            function search_byaddress() {
                go_and_do(lat_current, lng_current);
            }

            function go_and_do(lat_current, lng_current) {

                var center = {
                    lat: lat_current,
                    lng: lng_current
                };

                map = new google.maps.Map(document.getElementById('map'), {
                    zoom: 17,
                    center: center,
                    // mapTypeId: 'hybrid',
                    clickableIcons: false,
                    // disableDefaultUI: true,
                    panControl: true,
                    zoomControl: true,
                    scaleControl: true,
                    styles: [{
                        featureType: 'poi',
                        stylers: [{
                            visibility: 'off'
                        }]
                    }, {
                        featureType: 'poi.business',
                        stylers: [{
                            visibility: 'off'
                        }]
                    }]
                });

                drawing_work();
            }


            map = new google.maps.Map(document.getElementById('map'), {
                zoom: 3,
                center: {
                    lat: 37.090240,
                    lng: -95.712891
                },
                // mapTypeId: 'hybrid',
                clickableIcons: false,
                // disableDefaultUI: true,
                panControl: true,
                zoomControl: true,
                scaleControl: true,
                styles: [{
                    featureType: 'poi',
                    stylers: [{
                        visibility: 'off'
                    }]
                }, {
                    featureType: 'poi.business',
                    stylers: [{
                        visibility: 'off'
                    }]
                }]
            });

            drawing_work();

            function drawing_work() {
                var polyOptions = {
                    strokeWeight: 0,
                    fillOpacity: 0.45,
                    editable: true
                };
                // Creates a drawing manager attached to the map that allows the user to draw
                // markers, lines, and shapes.
                drawingManager = new google.maps.drawing.DrawingManager({
                    drawingMode: google.maps.drawing.OverlayType.POLYGON,
                    markerOptions: {
                        draggable: true
                    },
                    polylineOptions: {
                        editable: true
                    },
                    rectangleOptions: polyOptions,
                    circleOptions: polyOptions,
                    polygonOptions: polyOptions,
                    drawingControlOptions: {
                        position: google.maps.ControlPosition.TOP_CENTER,
                        drawingModes: [google.maps.drawing.OverlayType.POLYGON]
                    },

                    map: map
                });

                google.maps.event.addListener(drawingManager, 'overlaycomplete', function(e) {
                    if (e.type != google.maps.drawing.OverlayType.MARKER) {
                        // Switch back to non-drawing mode after drawing a shape.
                        drawingManager.setDrawingMode(null);

                        // Add an event listener that selects the newly-drawn shape when the user
                        // mouses down on it.
                        var newShape = e.overlay;
                        newShape.type = e.type;
                        google.maps.event.addListener(newShape, 'click', function() {
                            setSelection(newShape);
                        });
                        var area = google.maps.geometry.spherical.computeArea(newShape.getPath());
                        var sqare_feett = area * 10.764;
                        document.getElementById("area").innerHTML = "Current Area = " + sqare_feett.toFixed(2) + " ft²";
                        setSelection(newShape);
                    }
                });

                // Clear the current selection when the drawing mode is changed, or when the
                // map is clicked.
                google.maps.event.addListener(drawingManager, 'drawingmode_changed', clearSelection);
                google.maps.event.addListener(map, 'click', clearSelection);
                google.maps.event.addDomListener(document.getElementById('delete-button'), 'click', deleteSelectedShape);

                buildColorPalette();

            }

        }
    </script>
    <!--Load the API from the specified URL -- remember to replace YOUR_API_KEY-->
    <script src="https://maps.googleapis.com/maps/api/js?libraries=places,geometry,drawing&key=AIzaSyCxfloMLQhp89EaM0NbiebXOgISHxuB7kM&callback=initMap"></script>
</body>
</html>
